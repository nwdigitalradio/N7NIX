#!/bin/bash
#
# Script to stop direwolf & AX.25 services
# The script disables & stops the services

scriptname="`basename $0`"
DEBUG=
QUIET=

USER=
PORT_CFG_FILE="/etc/ax25/port.conf"
SERVICE_LIST="ax25dev.service ax25dev.path direwolf.service ax25-mheardd.service ax25d.service"
SYSTEMCTL="systemctl"

# if DEBUG is defined then echo
function dbgecho { if [ ! -z "$DEBUG" ] ; then echo "$*"; fi }
# if QUIET is defined the DO NOT echo
function quietecho { if [ -z "$QUIET" ] ; then echo "$*"; fi }

# ===== function stop_service

function stop_service() {
    service="$1"
    systemctl is-enabled "$service" > /dev/null 2>&1
    if [ $? -eq 0 ] ; then
        quietecho "DISABLING $service"
        $SYSTEMCTL disable "$service"
        if [ "$?" -ne 0 ] ; then
            echo "Problem DISABLING $service"
        fi
    else
        echo "Service: $service already disabled."
    fi
    $SYSTEMCTL stop "$service"
    if [ "$?" -ne 0 ] ; then
        echo "Problem STOPPING $service"
    fi
}

# ===== function get_user
# When running as root need to find a valid local bin directory
# Set USER based on finding a REQUIRED_PROGRAM

function get_user() {
   # Check if there is only a single user on this system
   if (( `ls /home | wc -l` == 1 )) ; then
       USER=$(ls /home)
   else
       USER=
       # Get here when there is more than one user on this system,
       # Find the local bin that has the requested program
       # Requested program list: $LOCALBIN_LIST
       # Assume all programs from $LOCALBIN_LIST are in same directory path

       REQUIRED_PROGRAM="ax25-stop.desktop"

       for DIR in $(ls /home | tr '\n' ' ') ; do
          if [ -d "/home/$DIR" ] && [ -e "/home/$DIR/bin/$REQUIRED_PROGRAM" ] ; then
              USER="$DIR"
              dbgecho "DEBUG: found dir: /home/$DIR & /home/$DIR/bin/$REQUIRED_PROGRAM"

              break
          fi
        done
    fi
}

# ==== function check_user
# verify user name is legit

function check_user() {
   userok=false
   dbgecho "$scriptname: Verify user name: $USER"
   for username in $USERLIST ; do
      if [ "$USER" = "$username" ] ; then
         userok=true;
      fi
   done

   if [ "$userok" = "false" ] ; then
      echo "$scriptname: User name ($USER) does not exist,  must be one of: $USERLIST"
      exit 1
   fi

   dbgecho "using USER: $USER"
}

# ===== function change_icon
# If an icon is present change it
function change_icon() {

    ax25_desktop_file="/home/$USER/Desktop/ax25-startstop.desktop"

    if [ -e "$ax25_desktop_file" ] ; then
        icon_action="start"
        if [ "$1" == "off" ] ; then
            icon_action="stop"
        fi
        # change icon
        if [ "$(stat -c "%U" $ax25_desktop_file)" != "$USER" ] ; then
            sudo chown $USER:$USER "$ax25_desktop_file"
        fi

        cp $LOCAL_BIN_PATH/ax25-${icon_action}.desktop "$ax25_desktop_file"
        quietecho "changed icon to $1"
    fi
}

# ===== main

QUIET=
USER=

# Check if there are any args on command line
# Use to quiet output
if (( $# != 0 )) ; then
   QUIET=1
fi

# Get list of users with home directories
USERLIST="$(ls /home)"
USERLIST="$(echo $USERLIST | tr '\n' ' ')"

# Check if running as root
if [[ $EUID != 0 ]] ; then
    quietecho "set sudo"
    if [ -z $QUIET ] ; then
        SYSTEMCTL="sudo systemctl"
    else
        SYSTEMCTL="sudo systemctl --quiet"
    fi
    USER=$(whoami)
else
    if [ -z $QUIET ] ; then
        SYSTEMCTL="systemctl"
    else
        SYSTEMCTL="systemctl --quiet"
    fi
    get_user
    check_user
fi

LOCAL_BIN_PATH="/home/$USER/bin"
ax25_udr0_baud="not configured"
ax25_udr1_baud="not configured"

if [ -e $PORT_CFG_FILE ] ; then
    ax25_udr0_baud=$(sed -n '/\[port0\]/,/\[/p' $PORT_CFG_FILE | grep -i "^speed" | cut -f2 -d'=')
    ax25_udr1_baud=$(sed -n '/\[port1\]/,/\[/p' $PORT_CFG_FILE | grep -i "^speed" | cut -f2 -d'=')
    dbgecho "AX.25: udr0 speed: $ax25_udr0_baud, udr1 speed: $ax25_udr1_baud"
else
    echo "Port config file: $PORT_CFG_FILE NOT found."
fi

quietecho
quietecho "STOPPING AX.25/Direwolf: port 0: $ax25_udr0_baud & port1: $ax25_udr1_baud baud modems."

for service in `echo ${SERVICE_LIST}` ; do
#    echo "DEBUG: Stopping service: $service"
    stop_service $service
done

change_icon "on"

if [ -e "/tmp/kisstnc" ] ; then
    rm -f /tmp/kisstnc
fi
