#!/bin/bash
#
# Script to start up direwolf & AX.25 services
# The script enables & starts the services

scriptname="`basename $0`"
DEBUG=
QUIET=

USER=
AX25_CFGDIR="/usr/local/etc/ax25"
PORT_CFG_FILE="$AX25_CFGDIR/port.conf"
SERVICE_LIST="direwolf.service ax25dev.path ax25dev.service ax25-mheardd.service ax25d.service"
LOCALBIN_LIST="iptable-flush.sh iptable-up.sh ax25-start.desktop ax25-stop.desktop"
SYSTEMCTL="systemctl"

# if DEBUG is defined then echo
function dbgecho { if [ ! -z "$DEBUG" ] ; then echo "$*"; fi }
# if QUIET is defined the DO NOT echo
function quietecho { if [ -z "$QUIET" ] ; then echo "$*"; fi }

# ===== function start_service

function start_service() {
    service="$1"
    quietecho "Starting: $service"

    systemctl is-enabled "$service" > /dev/null 2>&1
    if [ $? -ne 0 ] ; then
        quietecho "ENABLING $service"
        $SYSTEMCTL enable "$service"
        if [ "$?" -ne 0 ] ; then
            echo "Problem ENABLING $service"
            exit
        fi
    fi

    $SYSTEMCTL --no-pager start "$service"
    if [ "$?" -ne 0 ] ; then
        echo "Problem starting $service"
        systemctl status $service
        exit
    fi
}

# ===== function get_user
# When running as root need to find a valid local bin directory
# Set USER based on finding a REQUIRED_PROGRAM

function get_user() {
    # Check if there is only a single user on this system
    if (( `ls /home | wc -l` == 1 )) ; then
        USER=$(ls /home)
    else
        USER=
        # Get here when there is more than one user on this system,
        # Find the local bin that has the requested program
        # Requested program list: $LOCALBIN_LIST
        # Assume all programs from $LOCALBIN_LIST are in same directory path

        REQUIRED_PROGRAM="iptable-flush.sh"

        for DIR in $(ls /home | tr '\n' ' ') ; do
             if [ -d "/home/$DIR" ] && [ -e "/home/$DIR/bin/$REQUIRED_PROGRAM" ] ; then
                USER="$DIR"
                dbgecho "DEBUG: found dir: /home/$DIR & /home/$DIR/bin/$REQUIRED_PROGRAM"

                break
            fi
        done
    fi
}

# ==== function check_user
# verify user name is legit

function check_user() {
   userok=false
   dbgecho "$scriptname: Verify user name: $USER"
   for username in $USERLIST ; do
      if [ "$USER" = "$username" ] ; then
         userok=true;
      fi
   done

   if [ "$userok" = "false" ] ; then
      echo "$scriptname: User name ($USER) does not exist,  must be one of: $USERLIST"
      exit 1
   fi

   dbgecho "using USER: $USER"
}

# ===== function change_icon
# If an icon is present change it
function change_icon() {

    ax25_desktop_file="/home/$USER/Desktop/ax25-startstop.desktop"

    if [ -e "$ax25_desktop_file" ] ; then
        icon_action="start"
        if [ "$1" == "off" ] ; then
            icon_action="stop"
        fi
        # change icon
        if [ "$(stat -c "%U" $ax25_desktop_file)" != "$USER" ] ; then
            sudo chown $USER:$USER "$ax25_desktop_file"
        fi

        cp $LOCAL_BIN_PATH/ax25-${icon_action}.desktop "$ax25_desktop_file"
        quietecho "changed icon to $1"
    fi
}

# ===== main

QUIET=
USER=

# Check if direwolf is already running.
pid=$(pidof direwolf)
if [ $? -eq 0 ] ; then
    echo "Direwolf already running with a pid of $pid ... exiting."
    exit 1
fi

# Check if there are any args on command line
# Use to quiet output
if (( $# != 0 )) ; then
   QUIET=1
fi

# Get list of users with home directories
USERLIST="$(ls /home)"
USERLIST="$(echo $USERLIST | tr '\n' ' ')"

# Check if running as root
if [[ $EUID != 0 ]] ; then
    quietecho "set sudo"
    if [ -z $QUIET ] ; then
        SYSTEMCTL="sudo systemctl"
    else
        SYSTEMCTL="sudo systemctl --quiet"
    fi
    USER=$(whoami)
else
    if [ -z $QUIET ] ; then
        SYSTEMCTL="systemctl"
    else
        SYSTEMCTL="systemctl --quiet"
    fi
    get_user
    check_user
fi

LOCAL_BIN_PATH="/home/$USER/bin"

# If no port config file found create one
if [ ! -f $PORT_CFG_FILE ] ; then
    echo "No port config file: $PORT_CFG_FILE found, copying from repo."
    sudo cp $HOME/n7nix/ax25/port.conf $PORT_CFG_FILE
fi

ax25_udr0_baud="not configured"
ax25_udr1_baud="not configured"

if [ -e $PORT_CFG_FILE ] ; then
    ax25_udr0_baud=$(sed -n '/\[port0\]/,/\[/p' $PORT_CFG_FILE | grep -i "^speed" | cut -f2 -d'=')
    ax25_udr1_baud=$(sed -n '/\[port1\]/,/\[/p' $PORT_CFG_FILE | grep -i "^speed" | cut -f2 -d'=')
    dbgecho "AX.25: udr0 speed: $ax25_udr0_baud, udr1 speed: $ax25_udr1_baud"
else
    echo "Port config file: $PORT_CFG_FILE NOT found."
fi

quietecho
quietecho "STARTING AX.25/Direwolf: port 0: $ax25_udr0_baud & port1: $ax25_udr1_baud baud modems."

for service in `echo ${SERVICE_LIST}` ; do
    start_service $service
    if [ "$service" = "direwolf.service" ] ; then
       while [ ! -L "/tmp/kisstnc" ] ; do
           sleep 0.4
       done
    fi
done

quietecho
quietecho "== Verify IPtables"

rule_count=$(grep -c "\-A OUTPUT" /etc/iptables/rules.ipv4.ax25)
quietecho "Number of ax25 iptables rules found: $rule_count"

CREATE_IPTABLES=false
IPTABLES_FILES="/etc/iptables/rules.ipv4.ax25 /lib/dhcpcd/dhcpcd-hooks/70-ipv4.ax25"
for ipt_file in `echo ${IPTABLES_FILES}` ; do

   if [ -f $ipt_file ] ; then
      quietecho "iptables file: $ipt_file exists"
   else
      echo "Need to create iptables file: $ipt_file"
      CREATE_IPTABLES=true
   fi
done

if [ -e "/etc/iptables/rules.ipv4.ax25" ] && [ $rule_count -lt 6 ] ; then
    dbgecho "Will create iptables rules due to rule count: $rule_count"
    CREATE_IPTABLES=true
fi

if [ "$CREATE_IPTABLES" = "true" ] ; then

    sudo /bin/bash $LOCAL_BIN_PATH/iptable-flush.sh

    # Setup some iptable rules
    # 224.0.0.22
    #  - used for the IGMPv3 protocol.
    # 239.255.255.250:1900
    #  - Chromecast
    #  - traffic is discovery multicast traffic that occurs every 2 minutes from the system
    #  - UPnP (Universal Plug and Play)/SSDP (Simple Service Discovery Protocol) by various vendors to advertise the capabilities of (or discover) devices
    echo
    echo "== Setup iptables"
    sudo /bin/bash $LOCAL_BIN_PATH/iptable-up.sh
    sudo sh -c "iptables-save > /etc/iptables/rules.ipv4.ax25"

    grep "iptables-restore" /lib/dhcpcd/dhcpcd-hooks/70-ipv4.ax25 > /dev/null 2>&1
    retcode="$?"
    if [ "$retcode" -ne 0 ] ; then
        echo "Setup restore command"
        sudo tee /lib/dhcpcd/dhcpcd-hooks/70-ipv4.ax25 > /dev/null <<EOF
iptables-restore < /etc/iptables/rules.ipv4.ax25
EOF
    fi
    rule_count=$(grep -c "\-A OUTPUT" /etc/iptables/rules.ipv4.ax25)
    echo "Number of ax25 rules now: $rule_count"
fi

change_icon "off"
